{"version":3,"sources":["algorithms/linkedList.js","components/smiley.js","pages/LinkedList.js","algorithms/binaryTree.js","pages/BinaryTree.js","App.js","reportWebVitals.js","index.js"],"names":["Node","value","next","this","LinkedList","head","tail","length","temp","currentNode","output","push","index","append","prepend","prev","traverseToIndex","newNode","counter","Face","id","item","className","style","position","fontWeight","useState","list","setList","linkedList","setLinkedList","setValue","setIndex","eyeball","event","document","querySelectorAll","forEach","eye","x","getBoundingClientRect","left","clientWidth","y","top","clientHeight","rot","Math","atan2","pageX","pageY","PI","transform","myMove","newList","activeIndex","resolve","mode","elem","getElementById","pos","down","found","clearInterval","setInterval","backgroundColor","useEffect","LinkedListClass","convertToArray","querySelector","addEventListener","handleAddItem","a","insert","Promise","handleRemoveItem","remove","handleGetItemAtIndex","undefined","minWidth","spacing","marginTop","marginLeft","isRequired","placeholder","size","maxWidth","type","max","onChange","parseInt","min","e","target","colorScheme","onClick","display","justifyContent","width","map","wait","setTimeout","right","BinarySearchTree","animateBreathFirstSearch","root","queue","$","css","effect","shift","breathFirstSearch","leftChange","formerLeft","BreadthFirstSearchR","traversePreOrder","traversePostOrder","traverseInOrder","node","build","BinaryTree","bTree","setBTree","tree","animateInsert","animateRemove","animateLookup","handleBFS","handleDFSPreOrder","DFTPreOrder","handleDFSInOrder","DFTInOrder","handleDFSPostOrder","DFTPostOrder","flexDirection","serialize","render","obj","App","setMode","handleChangeMode","toggle","Stucktures","direction","alignItems","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"yXAEMA,EACJ,WAAYC,GAAkB,IAAXC,EAAU,uDAAL,KAAK,oBAC3BC,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,GA0EDE,E,WAtEb,WAAYH,GAAO,oBACjBE,KAAKE,KAAO,IAAIL,EAAKC,GAErBE,KAAKG,KAAOH,KAAKE,KACjBF,KAAKI,OAAS,E,0CAGhB,SAAON,GACLE,KAAKG,KAAKJ,KAAO,IAAIF,EAAKC,GAC1BE,KAAKG,KAAOH,KAAKG,KAAKJ,KACtBC,KAAKI,W,qBAGP,SAAQN,GACN,IAAMO,EAAOL,KAAKE,KAClBF,KAAKE,KAAO,IAAIL,EAAKC,EAAOE,KAAKE,KAAKH,MACtCC,KAAKE,KAAKH,KAAOM,EACjBL,KAAKI,W,4BAGP,WAGE,IAFA,IAAIE,EAAcN,KAAKE,KACjBK,EAAS,GACTD,GACJC,EAAOC,KAAKF,EAAYR,OACxBQ,EAAcA,EAAYP,KAE5B,OAAOQ,I,oBAET,SAAOE,EAAOX,GACZ,GAAGW,GAAST,KAAKI,OACfJ,KAAKU,OAAOZ,QACR,GAAa,IAAVW,EACPT,KAAKW,QAAQb,OACV,CACH,IAAMc,EAAOZ,KAAKa,gBAAgBJ,GAC5BV,EAAOa,EAAKb,KACZe,EAAU,IAAIjB,EAAKC,EAAOC,GAChCa,EAAKb,KAAOe,EAGdd,KAAKI,W,oBAIP,SAAOK,GACL,GAAa,IAAVA,EACDT,KAAKE,KAAOF,KAAKE,KAAKH,SAEpB,CACF,IAAIa,EAAOZ,KAAKa,gBAAgBJ,GAC5BV,EAAOa,EAAKb,KAChBa,EAAKb,KAAOA,EAAKA,KAEnBC,KAAKI,W,6BAGP,SAAgBK,GAGd,IAFA,IAAIH,EAAcN,KAAKE,KACnBa,EAAU,EACRA,GAAWN,GAAM,CACnB,GAAGM,IAAYN,EAAQ,EACrB,OAAOH,EAETA,EAAcA,EAAYP,KAC1BgB,S,YC9DOC,EAVF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAChB,OAAQ,sBAAKC,UAAU,OAAOF,GAAE,iBAAYA,GAApC,UACR,sBAAKE,UAAU,OAAf,UACE,qBAAKA,UAAU,QACf,qBAAKA,UAAU,WAEjB,qBAAKC,MAAO,CAACC,SAAU,WAAYC,WAAY,QAA/C,SAAyDJ,QCoL9CjB,EArLI,SAAC,GAAW,EAATgB,GAAU,IAAD,EACLM,mBAAS,IADJ,mBACtBC,EADsB,KAChBC,EADgB,OAEOF,qBAFP,mBAEtBG,EAFsB,KAEVC,EAFU,OAGHJ,qBAHG,mBAGtBzB,EAHsB,KAGf8B,EAHe,OAIHL,qBAJG,mBAItBd,EAJsB,KAIfoB,EAJe,KAe7B,SAASC,EAAQC,GACLC,SAASC,iBAAiB,QAChCC,SAAQ,SAAUC,GAEpB,IAAIC,EAAID,EAAIE,wBAAwBC,KAAOH,EAAII,YAAc,EACzDC,EAAIL,EAAIE,wBAAwBI,IAAMN,EAAIO,aAAe,EAGzDC,EAFSC,KAAKC,MAAMd,EAAMe,MAAQV,EAAGL,EAAMgB,MAAQP,IAEnC,IAAMI,KAAKI,KAAO,EAAI,IAC1Cb,EAAIf,MAAM6B,UAAY,UAAYN,EAAM,UAI5C,SAASO,EAAOC,EAASC,EAAaC,EAASC,GAC3C,GAAGH,EAAQ/C,SAAWgD,EAAtB,CAKF,IAAInC,EAAK,KACHsC,EAAOvB,SAASwB,eAAT,iBAAkCJ,IAC3CK,EAAM,EACNC,GAAO,EACPC,GAAQ,EACZC,cAAc3C,GACdA,EAAK4C,aAEL,WACMH,EACFD,IAEAA,IAIF,OAFAF,EAAKnC,MAAMqB,IAAMgB,EAAM,KAEhBH,GACL,IAAK,MAUH,GATY,MAARG,IACFC,GAAO,EACJP,EAAQC,EAAa,KAAO5B,EAAK4B,EAAc,IAC9CG,EAAKnC,MAAM0C,gBAAkB,UAC7BH,GAAQ,GAERJ,EAAKnC,MAAM0C,gBAAkB,OAGvB,IAARL,EAKF,OAJAF,EAAKnC,MAAM0C,gBAAkB,UAC7BJ,GAAO,EAEPE,cAAc3C,GACX0C,OACCN,IAKCH,EAAOC,EAASC,EAAc,EAAGC,EAASC,GAEjD,MACF,IAAK,MAUH,GATY,MAARG,IACFC,GAAO,EACJN,IAAiB3C,GAChB8C,EAAKnC,MAAM0C,gBAAkB,UAC7BH,GAAQ,GAERJ,EAAKnC,MAAM0C,gBAAkB,OAGvB,IAARL,EAKF,OAJAF,EAAKnC,MAAM0C,gBAAkB,UAC7BJ,GAAO,EAEPE,cAAc3C,GACX0C,OACCN,IAKCH,EAAOC,EAASC,EAAc,EAAGC,EAASC,MAxD/B,QAVlBD,IAxBRU,qBAAU,WACR,IAAMrC,EAAa,IAAIsC,EAAgB,GACvCrC,EAAcD,GACdD,EAAQC,EAAWuC,oBAClB,IACHF,qBAAU,WACR/B,SAASkC,cAAc,QAAQC,iBAAiB,YAAarC,KAC5D,IA+FH,IAAMsC,EAAa,uCAAG,4BAAAC,EAAA,yDACdvE,KAAUW,EAAQe,EAAKpB,QADT,wDAKlBsB,EAAW4C,OAAO7D,EAAOX,GACnBqD,EAAUzB,EAAWuC,iBANT,SAOZ,IAAIM,SAAQ,SAAClB,GAAD,OAAYH,EAAOC,EAAS,EAAGE,EAAS,UAPxC,OAQlB5B,EAAQC,EAAWuC,kBACnBpC,EAAS,GACTD,IAVkB,2CAAH,qDAcb4C,EAAgB,uCAAG,4BAAAH,EAAA,yDACnB5D,KAAUA,EAAQe,EAAKpB,OAAO,GADX,wDAIvBsB,EAAW+C,OAAOhE,GACV0C,EAAUzB,EAAWuC,iBALN,SAMf,IAAIM,SAAQ,SAAClB,GAAD,OAAYH,EAAOC,EAAS,EAAGE,EAAS,UANrC,OAOrB5B,EAAQC,EAAWuC,kBAEnBpC,EAAS,GACTD,IAVqB,2CAAH,qDAahB8C,EAAoB,uCAAG,sBAAAL,EAAA,gEACdM,IAAVlE,GAAwBA,EAAQe,EAAKpB,OAAO,GADpB,iEAIrB,IAAImE,SAAQ,SAAClB,GAAD,OAAYH,EAAO1B,EAAM,EAAG6B,EAAS,UAJ5B,OAK3BxB,EAAS,GACTD,IAN2B,2CAAH,qDAS1B,OACE,eAAC,IAAD,CAAWgD,SAAS,OAApB,UACE,eAAC,IAAD,CAAOC,QAAS,EAAGC,UAAU,QAAQC,WAAW,OAAhD,UACA,eAAC,IAAD,CAAaC,YAAU,EAAvB,UACI,cAAC,IAAD,oBACF,eAAC,IAAD,CAAaC,YAAY,QAAQC,KAAK,KAAKC,SAAS,QAAQC,KAAK,SAASC,IAAK7D,EAAKpB,OAAQkF,SAAU,SAACxF,GAAD,OAAU+B,EAAS0D,SAASzF,KAAS0F,IAAK,EAAhJ,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,aAIJ,eAAC,IAAD,CAAavE,GAAG,aAAa+D,YAAU,EAAvC,UACE,cAAC,IAAD,oBACF,cAAC,IAAD,CAAOC,YAAY,uBAAuBC,KAAK,KAAKC,SAAS,QAAQG,SAAU,SAACG,GAAD,OAAM7D,EAAS6D,EAAEC,OAAO5F,aAEvG,cAAC,IAAD,CAAQ6F,YAAY,OAAOT,KAAK,KAAKC,SAAS,QAAQS,QAASxB,EAA/D,sBAGA,cAAC,IAAD,CAAQuB,YAAY,OAAOT,KAAK,KAAKC,SAAS,QAAQS,QAASlB,EAA/D,+BAGA,cAAC,IAAD,CAAQiB,YAAY,MAAMT,KAAK,KAAKC,SAAS,QAAQS,QAASpB,EAA9D,qCAKF,cAAC,IAAD,CAAWM,UAAU,QAAQe,QAAS,OAASC,eAAgB,SAAUC,MAAO,WAAhF,SACCvE,EAAKwE,KAAI,SAAC9E,EAAMT,GAAP,OACR,cAAC,EAAD,CAAiBQ,GAAIR,EAAOS,KAAMA,GAAvBA,Y,iBCpLb+E,EAAI,uCAAG,sBAAA5B,EAAA,sEAAmB,IAAIE,SAAQ,SAAClB,GAAD,OAAY6C,YAAW,kBAAK7C,EAAQ,QAAO,QAA1E,mFAAH,qDACJxD,EACF,WAAYC,GAA6B,oBACvCE,KAAKsC,KAAO,KACZtC,KAAKmG,MAAQ,KACbnG,KAAKF,MAAQA,GAKEsG,E,WACjB,aAAc,IAAD,gCA6PdC,yBA7Pc,sBA6Pa,gCAAAhC,EAAA,sDACtB/D,EAAc,EAAKgG,KAEnB9E,EAAO,IADP+E,EAAQ,IAEN/F,KAAKF,GAJe,WAKpBiG,EAAMnG,OALc,wBAMxBoG,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SAPpB,SAQlBT,IARkB,OASxBO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1DxD,EAAciG,EAAMI,QACpBnF,EAAKhB,KAAKF,EAAYR,OACnBQ,EAAYgC,MACbiE,EAAM/F,KAAKF,EAAYgC,MAEtBhC,EAAY6F,OACbI,EAAM/F,KAAKF,EAAY6F,OAhBD,gDAmBnB3E,GAnBmB,4CA7Pb,KAoRboF,kBAAoB,WAClB,IAAItG,EAAc,EAAKgG,KACnBC,EAAQ,GACR/E,EAAO,GAEX,IADA+E,EAAM/F,KAAKF,GACLiG,EAAMnG,QACVE,EAAciG,EAAMI,QACpBnF,EAAKhB,KAAKF,EAAYR,OACnBQ,EAAYgC,MACbiE,EAAM/F,KAAKF,EAAYgC,MAEtBhC,EAAY6F,OACbI,EAAM/F,KAAKF,EAAY6F,OAG3B,OAAO3E,GAlSPxB,KAAKsG,KAAO,K,wFAEd,WAAoBxG,GAApB,iBAAAuE,EAAA,yDACMrE,KAAKsG,KADX,gBAEItG,KAAKsG,KAAO,IAAIzG,EAAKC,GAFzB,uBAIQ6D,GAAQ,EACRrD,EAAcN,KAAKsG,KAL3B,UAMW3C,EANX,sBAOSrD,EAAYR,MAAQA,GAP7B,oBAQYQ,EAAY6F,MARxB,wBASQK,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SAVpD,UAWcT,IAXd,QAYQO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YACxDxD,EAAY6F,MAAQ,IAAItG,EAAKC,GAC7B6D,GAAQ,EAdlB,+BAiBY6C,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,QAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SAlBxD,UAmBkBT,IAnBlB,QAoBYO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1DxD,EAAcA,EAAY6F,MArBtC,qCAwBe7F,EAAYR,MAAQA,GAxBnC,oBAyBYQ,EAAYgC,KAzBxB,wBA0BYkE,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SA3BxD,UA4BkBT,IA5BlB,QA6BU3F,EAAYgC,KAAO,IAAIzC,EAAKC,GAC5B6D,GAAQ,EACR6C,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YA/BpE,+BAiCY0C,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,QAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SAlCxD,UAmCkBT,IAnClB,QAoCYO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1DxD,EAAcA,EAAYgC,KArCtC,kI,kHAkDA,WAAaxC,GAAb,iBAAAuE,EAAA,sDACI,GAAIrE,KAAKsG,KAKP,IAFI3C,GAAQ,EACRrD,EAAcN,KAAKsG,MAChB3C,GACFrD,EAAYR,MAAQA,EACjBQ,EAAY6F,MAKZ7F,EAAcA,EAAY6F,OAJ5B7F,EAAY6F,MAAQ,IAAItG,EAAKC,GAC7B6D,GAAQ,GAMHrD,EAAYR,MAAQA,IACvBQ,EAAYgC,KAIZhC,EAAcA,EAAYgC,MAH5BhC,EAAYgC,KAAO,IAAIzC,EAAKC,GAC5B6D,GAAQ,SAjBd3D,KAAKsG,KAAO,IAAIzG,EAAKC,GAF3B,gD,2EA+BA,SAAOA,GACL,GAAIE,KAAKsG,KAEJ,CAEH,IADA,IAAIhG,EAAcN,KAAKsG,KACjBhG,GACJ,GAAGA,EAAYR,MAAQA,EACpBQ,EAAcA,EAAY6F,UAEvB,MAAG7F,EAAYR,MAAQA,GAI3B,OAAO,EAHPQ,EAAcA,EAAYgC,KAM9B,OAAO,EAdP,OAAO,O,kEAmBX,WAAoBxC,GAApB,eAAAuE,EAAA,yDACMrE,KAAKsG,KADX,yCAEW,MAFX,OAIQhG,EAAcN,KAAKsG,KAJ3B,WAKUhG,EALV,sBAMSA,EAAYR,MAAQA,GAN7B,wBAOQ0G,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,QAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SARpD,UAScT,IATd,QAUQO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YACzDxD,EAAcA,EAAY6F,MAXnC,6BAae7F,EAAYR,MAAQA,GAbnC,wBAcQ0G,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,QAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SAfpD,UAgBcT,IAhBd,QAiBQO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1DxD,EAAcA,EAAYgC,KAlBlC,+BAqBQkE,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SAtBpD,UAuBcT,IAvBd,yBAwBcA,IAxBd,eAyBQO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAzBlE,mBA0Be,GA1Bf,yDA6BW,GA7BX,iD,2EAkCA,SAAOhE,GACJ,IAAIE,KAAKsG,KACR,OAAO,KAKP,IAHA,IAAIhG,EAAcN,KAAKsG,KACnBjG,EAAOL,KAAKsG,KACZO,GAAa,EACXvG,GACH,GAAGA,EAAYR,MAAQA,EACrBO,EAAOC,EACPA,EAAcA,EAAY6F,MAC1BU,GAAa,OAEV,GAAGvG,EAAYR,MAAQA,EAC3BO,EAAOC,EACPA,EAAcA,EAAYgC,KAC1BuE,GAAa,OAGb,GAAIvG,EAAYgC,MAAShC,EAAY6F,MAO/B,IAAI7F,EAAY6F,MAQhB,CACH,IAAMW,EAAaxG,EAAYgC,MAC/BhC,EAAcA,EAAY6F,OACd7D,KAAOwE,EAChBD,EACFxG,EAAKiC,KAAOhC,EAEVD,EAAK8F,MAAQ7F,EAEjB,MAhBCA,EAAcA,EAAYgC,KACvBuE,EACFxG,EAAKiC,KAAOhC,EAEVD,EAAK8F,MAAQ7F,OAXduG,EACDxG,EAAKiC,KAAO,KAEZjC,EAAK8F,MAAQ,KAEf7F,EAAc,O,kEA0BxB,WAAoBR,GAApB,qBAAAuE,EAAA,yDACMrE,KAAKsG,KADX,yCAEU,MAFV,OAIOhG,EAAcN,KAAKsG,KACnBjG,EAAOL,KAAKsG,KACZO,GAAa,EANpB,WAOSvG,EAPT,sBAQSA,EAAYR,MAAQA,GAR7B,wBASQ0G,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,QAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SAVpD,UAWcT,IAXd,QAYQO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1DzD,EAAOC,EACPA,EAAcA,EAAY6F,MAC1BU,GAAa,EAfrB,6BAiBcvG,EAAYR,MAAQA,GAjBlC,wBAkBM0G,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,QAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SAnBlD,UAoBYT,IApBZ,QAqBMO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YACzDzD,EAAOC,EACPA,EAAcA,EAAYgC,KAC1BuE,GAAa,EAxBpB,+BA2BML,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YAC1D0C,IAAE,WAAD,OAAalG,EAAYR,QAAU4G,OAAQ,SA5BlD,UA6BYT,IA7BZ,WA8BMO,IAAE,WAAD,OAAalG,EAAYR,QAAU2G,IAAI,CAAC3C,gBAAiB,YACrDxD,EAAYgC,MAAShC,EAAY6F,MA/B5C,iBAgCYU,EACDxG,EAAKiC,KAAO,KAEZjC,EAAK8F,MAAQ,KAEf7F,EAAc,KArCvB,2BAsCiBA,EAAY6F,MAtC7B,iBAuCU7F,EAAcA,EAAYgC,KACvBuE,EACFxG,EAAKiC,KAAOhC,EAEVD,EAAK8F,MAAQ7F,EA3C1B,+BA+CgBwG,EAAaxG,EAAYgC,MAC/BhC,EAAcA,EAAY6F,OACd7D,KAAOwE,EAChBD,EACFxG,EAAKiC,KAAOhC,EAEVD,EAAK8F,MAAQ7F,EArD1B,6F,wFAwGC,SAAoBiG,EAAO/E,GAC1B,IAAK+E,EAAMnG,OACT,OAAOoB,EAET,IAAMlB,EAAciG,EAAMI,QAU1B,OATAnF,EAAKhB,KAAKF,EAAYR,OAElBQ,EAAYgC,MACdiE,EAAM/F,KAAKF,EAAYgC,MAErBhC,EAAY6F,OACdI,EAAM/F,KAAKF,EAAY6F,OAGlBnG,KAAK+G,oBAAoBR,EAAO/E,K,gEAGzC,wCAAA6C,EAAA,6DAAkB7C,EAAlB,+BAAuB,GAAvB,SACewF,EAAiBhH,KAAKsG,KAAM9E,GAD3C,wF,uHAGA,wCAAA6C,EAAA,6DAAmB7C,EAAnB,+BAAwB,GAAxB,SACeyF,EAAkBjH,KAAKsG,KAAM9E,GAD5C,wF,qHAGA,wCAAA6C,EAAA,6DAAiB7C,EAAjB,+BAAsB,GAAtB,SACe0F,EAAgBlH,KAAKsG,KAAM9E,GAD1C,wF,yEAKF,SAAM2F,GACJ,GAAIA,EAGJ,MAAO,CACLA,KAAMA,EAAKrH,MACXwC,KAAMtC,KAAKoH,MAAMD,EAAK7E,MACtB6D,MAAOnG,KAAKoH,MAAMD,EAAKhB,U,uBAIzB,WAEI,OAAOnG,KAAKoH,MAAMpH,KAAKsG,U,cAIdU,E,gFAAf,WAAgCG,EAAM3F,GAAtC,SAAA6C,EAAA,6DACEmC,IAAE,WAAD,OAAaW,EAAKrH,QAAU2G,IAAI,CAAC3C,gBAAiB,YACnD0C,IAAE,WAAD,OAAaW,EAAKrH,QAAU4G,OAAQ,SAFvC,SAGQT,IAHR,UAIEO,IAAE,WAAD,OAAaW,EAAKrH,QAAU2G,IAAI,CAAC3C,gBAAiB,YACnDtC,EAAKhB,KAAK2G,EAAKrH,QACZqH,EAAK7E,KANV,gCAOU0E,EAAiBG,EAAK7E,KAAMd,GAPtC,WASK2F,EAAKhB,MATV,kCAUUa,EAAiBG,EAAKhB,MAAO3E,GAVvC,iCAYSA,GAZT,6C,+BAee0F,E,gFAAf,WAA+BC,EAAM3F,GAArC,SAAA6C,EAAA,0DACK8C,EAAK7E,KADV,gCAEU4E,EAAgBC,EAAK7E,KAAMd,GAFrC,cAIEgF,IAAE,WAAD,OAAaW,EAAKrH,QAAU2G,IAAI,CAAC3C,gBAAiB,YACnD0C,IAAE,WAAD,OAAaW,EAAKrH,QAAU4G,OAAQ,SALvC,SAMQT,IANR,UAOEO,IAAE,WAAD,OAAaW,EAAKrH,QAAU2G,IAAI,CAAC3C,gBAAiB,YACnDtC,EAAKhB,KAAK2G,EAAKrH,QACZqH,EAAKhB,MATV,kCAUUe,EAAgBC,EAAKhB,MAAO3E,GAVtC,iCAYSA,GAZT,6C,+BAeeyF,E,gFAAf,WAAiCE,EAAM3F,GAAvC,SAAA6C,EAAA,0DACK8C,EAAK7E,KADV,gCAEU2E,EAAkBE,EAAK7E,KAAMd,GAFvC,WAIK2F,EAAKhB,MAJV,gCAKUc,EAAkBE,EAAKhB,MAAO3E,GALxC,cAOEgF,IAAE,WAAD,OAAaW,EAAKrH,QAAU2G,IAAI,CAAC3C,gBAAiB,YACnD0C,IAAE,WAAD,OAAaW,EAAKrH,QAAU4G,OAAQ,SARvC,UASQT,IATR,eAUEO,IAAE,WAAD,OAAaW,EAAKrH,QAAU2G,IAAI,CAAC3C,gBAAiB,YACnDtC,EAAKhB,KAAK2G,EAAKrH,OAXjB,kBAYS0B,GAZT,6C,sBChXF,IAiLe6F,EAjLI,WAAO,IAAD,EACG9F,qBADH,mBAChB+F,EADgB,KACTC,EADS,OAEGhG,qBAFH,mBAEhBzB,EAFgB,KAET8B,EAFS,KAIvBmC,qBAAU,WACR/B,SAASkC,cAAc,QAAQC,iBAAiB,YAAarC,GAC7D,IAAM0F,EAAO,IAAIpB,EACjBoB,EAAKlD,OAAO,GACZkD,EAAKlD,OAAO,GACZkD,EAAKlD,OAAO,GACZkD,EAAKlD,OAAO,IACZkD,EAAKlD,OAAO,KACZkD,EAAKlD,OAAO,IACZkD,EAAKlD,OAAO,GACZiD,EAASC,KACR,IAEH,IAAMpD,EAAa,uCAAG,sBAAAC,EAAA,yDACfvE,EADe,iEAIdwH,EAAMG,cAAc3H,GAJN,OAMpByH,EAASD,GACT1F,IAPoB,2CAAH,qDAUb4C,EAAgB,uCAAG,sBAAAH,EAAA,yDACnBvE,EADmB,iEAIjBwH,EAAMI,cAAc5H,GAJH,OAKvB8B,IALuB,2CAAH,qDAQhB8C,EAAoB,uCAAG,sBAAAL,EAAA,yDACtBvE,EADsB,iEAIrBwH,EAAMK,cAAc7H,GAJC,OAK3B8B,IAL2B,2CAAH,qDAQpBgG,EAAS,uCAAG,sBAAAvD,EAAA,sEACViD,EAAMjB,2BADI,2CAAH,qDAITwB,EAAiB,uCAAG,sBAAAxD,EAAA,sEAClBiD,EAAMQ,cADY,2CAAH,qDAIjBC,EAAgB,uCAAG,sBAAA1D,EAAA,sEACjBiD,EAAMU,aADW,2CAAH,qDAIhBC,EAAkB,uCAAG,sBAAA5D,EAAA,sEACnBiD,EAAMY,eADa,2CAAH,qDAIxB,SAASpG,EAAQC,GACLC,SAASC,iBAAiB,QAChCC,SAAQ,SAAUC,GAEpB,IAAIC,EAAID,EAAIE,wBAAwBC,KAAOH,EAAII,YAAc,EACzDC,EAAIL,EAAIE,wBAAwBI,IAAMN,EAAIO,aAAe,EAGzDC,EAFSC,KAAKC,MAAMd,EAAMe,MAAQV,EAAGL,EAAMgB,MAAQP,IAEnC,IAAMI,KAAKI,KAAO,EAAI,IAC1Cb,EAAIf,MAAM6B,UAAY,UAAYN,EAAM,UAqB5C,OACE,cAAC,IAAD,CAAWiC,SAAS,OAApB,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,QAAS,EAAGC,UAAU,QAA7B,UACE,eAAC,IAAD,CAAa7D,GAAG,QAAQ+D,YAAU,EAAlC,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,CACEC,YAAY,uBACZC,KAAK,KACLC,SAAS,QACTG,SAAU,SAACG,GAAD,OAAO7D,EAAS6D,EAAEC,OAAO5F,aAGvC,cAAC,IAAD,CACE6F,YAAY,OACZT,KAAK,KACLC,SAAS,QACTS,QAASxB,EAJX,sBAQA,cAAC,IAAD,CACEuB,YAAY,OACZT,KAAK,KACLC,SAAS,QACTS,QAASlB,EAJX,sBASA,cAAC,IAAD,CACEiB,YAAY,SACZT,KAAK,KACLC,SAAS,QACTS,QAASmC,EAJX,yCASA,cAAC,IAAD,CACEpC,YAAY,SACZT,KAAK,KACLC,SAAS,QACTS,QAASiC,EAJX,0CAUA,cAAC,IAAD,CACElC,YAAY,OACZT,KAAK,KACLC,SAAS,QACTS,QAASqC,EAJX,2CAUA,cAAC,IAAD,CACEtC,YAAY,SACZT,KAAK,KACLC,SAAS,QACTS,QAASgC,EAJX,iCASA,cAAC,IAAD,CACEjC,YAAY,MACZT,KAAK,KACLC,SAAS,QACTS,QAASpB,EAJX,4BAUF,cAAC,IAAD,CAAM2D,cAAc,MAAMrC,eAAe,SAAShB,UAAU,QAA5D,SACE,qBAAK3D,UAAU,UAAf,SACE,6BAAKmG,GAASA,EAAMc,WAjGf,SAATC,EAAUC,GACZ,GAAIA,EAGN,OACE,+BACE,sBAAMnH,UAAU,QAAhB,SACE,cAAC,EAAD,CAAMF,GAAIqH,EAAInB,KAAMjG,KAAMoH,EAAInB,SAEhC,+BACGmB,EAAIhG,MAAQ+F,EAAOC,EAAIhG,MACvBgG,EAAInC,OAASkC,EAAOC,EAAInC,aAsFUkC,CAAOf,EAAMc,yBChI3CG,MA1Cf,WAAgB,IAAD,EACShH,qBADT,mBACR+B,EADQ,KACFkF,EADE,KAETC,EAAmB,SAACnF,GACxBkD,IAAG,YAAakC,OAAQ,WACxBxC,YAAW,kBAAKsC,EAAQlF,KAAM,MAI1BqF,EAAa,WACjB,OACE,eAAC,IAAD,CAAO9D,QAAS,EAAG+D,UAAU,MAAM3H,GAAG,UAAtC,UACE,cAAC,IAAD,CAAQ0E,YAAY,OAAOT,KAAK,KAAKU,QAAS,kBAAM6C,EAAiB,eAArE,yBAGA,cAAC,IAAD,CAAQ9C,YAAY,OAAOT,KAAK,KAAKU,QAAS,kBAAM6C,EAAiB,SAArE,yBAGA,cAAC,IAAD,CAAQ9C,YAAY,OAAOT,KAAK,KAAhC,mBAGA,cAAC,IAAD,CAAQS,YAAY,OAAOT,KAAK,KAAhC,uBAMJ,OAEE,cAAC,IAAD,UAEG,eAAC,IAAD,yBAAWN,SAAS,QAAQiB,QAAS,OAAQsC,cAAe,SAAWU,WAAY,WAAgBvF,GAAQ,CAAEwF,OAAQ,QAAShD,eAAgB,WAA9I,cAEA,cAAC6C,EAAD,IAEU,eAATrF,EACD,cAAC,EAAD,IAAwB,SAATA,EAAiB,cAAC,EAAD,IAAgB,UCnCxCyF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASnB,OACP,cAAC,IAAMoB,WAAP,UACE,cAAC,EAAD,MAEFzH,SAASwB,eAAe,SAM1BuF,M","file":"static/js/main.0615be35.chunk.js","sourcesContent":["//A pointer is a reference to a memory location\n\nclass Node{\n  constructor(value, next=null){\n    this.value = value;\n    this.next = next;\n  }\n}\nclass LinkedList {\n  constructor(value){\n    this.head = new Node(value)\n\n    this.tail = this.head;\n    this.length = 1\n  }\n\n  append(value){\n    this.tail.next = new Node(value)\n    this.tail = this.tail.next\n    this.length ++\n  }\n\n  prepend(value){\n    const temp = this.head;\n    this.head = new Node(value, this.head.next)\n    this.head.next = temp;\n    this.length ++;\n  }\n\n  convertToArray(){\n    let currentNode = this.head;\n    const output = []\n    while(currentNode){\n      output.push(currentNode.value)\n      currentNode = currentNode.next\n    }\n    return output;\n  }\n  insert(index, value){\n    if(index >= this.length){\n      this.append(value)\n    }else if(index === 0){\n      this.prepend(value)\n    }else{\n      const prev = this.traverseToIndex(index)\n      const next = prev.next;\n      const newNode = new Node(value, next)\n      prev.next = newNode\n    }\n\n    this.length ++\n\n  }\n\n  remove(index){\n    if(index === 0){\n      this.head = this.head.next\n    }\n    else{\n      let prev = this.traverseToIndex(index)\n      let next = prev.next;\n      prev.next = next.next\n    }\n    this.length --\n  }\n\n  traverseToIndex(index){\n    let currentNode = this.head;\n    let counter = 0\n    while(counter <= index){\n        if(counter === index - 1){\n          return currentNode;       \n        }\n        currentNode = currentNode.next;     \n        counter ++\n    }\n  }\n}\n\nexport default LinkedList","import React from 'react';\n\nconst Face = ({ id, item }) => {\n    return (<div className=\"face\" id={`animate${id}`}>\n    <div className=\"eyes\">\n      <div className=\"eye\"></div>\n      <div className=\"eye\"></div>\n    </div>\n    <div style={{position: 'absolute', fontWeight: 'bold'}}>{item}</div>\n  </div>)\n}\n\nexport default Face;","import { Container, Input, Stack, Button, NumberInput, NumberInputField, \n  NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper,\nFormControl, FormLabel } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport LinkedListClass from \"../algorithms/linkedList\";\nimport Face from \"../components/smiley\";\n\nconst LinkedList = ({ id }) => {\n  const [list, setList] = useState([]);\n  const [linkedList, setLinkedList] = useState();\n  const [value, setValue] = useState();\n  const [index, setIndex] = useState();\n  \n  useEffect(() => {\n    const linkedList = new LinkedListClass(3);\n    setLinkedList(linkedList);\n    setList(linkedList.convertToArray());\n  }, []);\n  useEffect(() => {\n    document.querySelector(\"body\").addEventListener(\"mousemove\", eyeball);\n  }, []);\n\n  function eyeball(event) {\n    var eye = document.querySelectorAll(\".eye\");\n    eye.forEach(function (eye) {\n      // x & y are variables and x represents the x coordinate of the mouse and y represents the coordinate of the mouse.\n      let x = eye.getBoundingClientRect().left + eye.clientWidth / 2;\n      let y = eye.getBoundingClientRect().top + eye.clientHeight / 2;\n      let radian = Math.atan2(event.pageX - x, event.pageY - y);\n      //   rot is a variable (short for rotate)\n      let rot = radian * (180 / Math.PI) * -1 + 270;\n      eye.style.transform = \"rotate(\" + rot + \"deg)\";\n    });\n  }\n\n  function myMove(newList, activeIndex, resolve, mode) {\n      if(newList.length === activeIndex){\n          resolve();\n          return;        \n      }\n      \n    let id = null;\n    const elem = document.getElementById(`animate${activeIndex}`);\n    let pos = 0;\n    let down = true;\n    let found = false;\n    clearInterval(id);\n    id = setInterval(frame, 5);\n    \n    function frame() {\n      if (down) {\n        pos++;\n      } else {\n        pos--;\n      }\n      elem.style.top = pos + \"px\";\n\n      switch(mode){\n        case 'add':\n          if (pos === 350) {\n            down = false;\n            if(newList[activeIndex +1] !== list[activeIndex + 1]){\n                elem.style.backgroundColor = \"#90ee90\";\n                found = true\n            } else {\n                elem.style.backgroundColor = \"red\";\n            }\n          }\n          if (pos === 0) {\n            elem.style.backgroundColor = \"#ffcd00\";\n            down = true;\n            \n            clearInterval(id);\n            if(found){\n                resolve();\n                return;   \n            }\n    \n          \n          return myMove(newList, activeIndex + 1, resolve, mode)\n        }\n          break;\n        case 'get':\n          if (pos === 350) {\n            down = false;\n            if(activeIndex  === index){\n                elem.style.backgroundColor = \"#90ee90\";\n                found = true\n            } else {\n                elem.style.backgroundColor = \"red\";\n            }\n          }\n          if (pos === 0) {\n            elem.style.backgroundColor = \"#ffcd00\";\n            down = true;\n            \n            clearInterval(id);\n            if(found){\n                resolve();\n                return;   \n            }\n    \n          \n          return myMove(newList, activeIndex + 1, resolve, mode)\n          }\n          break;\n        default: \n          break; \n\n      }\n    }\n        \n    \n  }\n\n  const handleAddItem = async () => {\n      if(!value || (index > list.length)){\n          return\n      }\n\n      linkedList.insert(index, value);\n      const newList = linkedList.convertToArray();\n      await new Promise((resolve)=> myMove(newList, 0, resolve, 'add'));\n      setList(linkedList.convertToArray())\n      setIndex(0);\n      setValue();\n\n  }\n\n  const handleRemoveItem = async () => {\n    if(!index || (index > list.length-1)){\n        return\n    }\n    linkedList.remove(index);\n      const newList = linkedList.convertToArray();\n      await new Promise((resolve)=> myMove(newList, 0, resolve, 'get'));\n      setList(linkedList.convertToArray())\n\n      setIndex(0);\n      setValue();\n  }\n\n  const handleGetItemAtIndex = async () => {\n    if(index === undefined || (index > list.length-1)){\n        return\n    }\n    await new Promise((resolve)=> myMove(list, 0, resolve, 'get'));\n    setIndex(0);\n    setValue();\n  }\n\n  return (\n    <Container minWidth=\"95vw\">\n      <Stack spacing={3} marginTop=\"100px\" marginLeft=\"39vw\">\n      <FormControl isRequired>\n          <FormLabel>Index</FormLabel>     \n        <NumberInput placeholder=\"Index\" size=\"lg\" maxWidth=\"300px\" type=\"number\" max={list.length} onChange={(value)=> setIndex(parseInt(value))} min={0}>\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        </FormControl>\n        <FormControl id=\"first-name\" isRequired>\n          <FormLabel>Value</FormLabel>     \n        <Input placeholder=\"Value of Item to Add\" size=\"lg\" maxWidth=\"300px\" onChange={(e)=> setValue(e.target.value)}/>\n        </FormControl>\n        <Button colorScheme=\"blue\" size=\"lg\" maxWidth=\"300px\" onClick={handleAddItem}>\n          Add Item\n        </Button>\n        <Button colorScheme=\"teal\" size=\"lg\" maxWidth=\"300px\" onClick={handleGetItemAtIndex}>\n          Get Item At Index\n        </Button>\n        <Button colorScheme=\"red\" size=\"lg\" maxWidth=\"300px\" onClick={handleRemoveItem}>\n          Remove Item At Index\n        </Button>\n       \n      </Stack>\n      <Container marginTop=\"100px\" display={'flex'}  justifyContent={'center'} width={\"inherrit\"}>\n      {list.map((item, index) => (\n        <Face key={item} id={index} item={item} />\n      ))}\n      </Container>\n    </Container>\n  );\n};\n\nexport default LinkedList;\n","import $ from 'jquery';\nconst wait = async () =>  await new Promise((resolve)=> setTimeout(()=> resolve(null), 500))\nclass Node {\n    constructor(value, left=null, right=null){\n      this.left = null;\n      this.right = null;\n      this.value = value;\n    }\n  }\n    \n  \nexport default class BinarySearchTree {\n    constructor(){\n      this.root = null;\n    }\n    async animateInsert(value){\n      if(!this.root){\n        this.root = new Node(value)\n      }else{\n        let found = false;\n        let currentNode = this.root;\n        while(!found){\n          if(currentNode.value < value){\n            if(!currentNode.right){\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"#90ee90\"});\n            $( `#animate${currentNode.value}` ).effect( \"shake\" );\n            await wait()\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n              currentNode.right = new Node(value)\n              found = true\n             \n            }else {\n                $( `#animate${currentNode.value}` ).css({backgroundColor: \"red\"});\n                $( `#animate${currentNode.value}` ).effect( \"shake\" );\n                await wait()  \n                $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});    \n                currentNode = currentNode.right;        \n            }\n  \n          }else if(currentNode.value > value){\n            if(!currentNode.left){\n                $( `#animate${currentNode.value}` ).css({backgroundColor: \"#90ee90\"});\n                $( `#animate${currentNode.value}` ).effect( \"shake\" );\n                await wait()\n              currentNode.left = new Node(value)\n              found = true    \n              $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n            }else {\n                $( `#animate${currentNode.value}` ).css({backgroundColor: \"red\"});\n                $( `#animate${currentNode.value}` ).effect( \"shake\" );\n                await wait()\n                $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n                currentNode = currentNode.left;\n            }\n           \n\n          } else {\n            return;\n          }\n\n        }\n      }\n      //Code here\n    }\n\n    async insert(value){\n        if(!this.root){\n          this.root = new Node(value)\n        }else{\n          let found = false;\n          let currentNode = this.root;\n          while(!found){\n            if(currentNode.value < value){\n              if(!currentNode.right){\n                currentNode.right = new Node(value)\n                found = true\n               \n              }else {   \n                  currentNode = currentNode.right;        \n              }\n    \n            }else if(currentNode.value > value){\n              if(!currentNode.left){\n                currentNode.left = new Node(value)\n                found = true    \n              }else {\n                  currentNode = currentNode.left;\n              }\n             \n  \n            }\n  \n          }\n        }\n        //Code here\n      }\n    lookup(value){\n      if(!this.root){\n        return null\n      }else{\n        let currentNode = this.root;\n        while(currentNode){\n          if(currentNode.value < value){\n             currentNode = currentNode.right;\n  \n          }else if(currentNode.value > value){\n            currentNode = currentNode.left;\n          }\n          else {\n            return true\n          }\n        }\n        return false\n      //Code here\n    }\n    }\n\n    async animateLookup(value){\n      if(!this.root){\n        return null\n      }else{\n        let currentNode = this.root;\n        while(currentNode){\n          if(currentNode.value < value){\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"red\"});\n            $( `#animate${currentNode.value}` ).effect( \"shake\" );\n            await wait()\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n             currentNode = currentNode.right;\n  \n          }else if(currentNode.value > value){\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"red\"});\n            $( `#animate${currentNode.value}` ).effect( \"shake\" );\n            await wait()\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n            currentNode = currentNode.left;\n          }\n          else {\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"#90ee90\"});\n            $( `#animate${currentNode.value}` ).effect( \"shake\" );\n            await wait()\n            await wait()\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n            return true\n          }\n        }\n        return false\n      //Code here\n    }\n    }\n  \n    remove(value){\n       if(!this.root){\n        return null\n      }else{\n        let currentNode = this.root;\n        let temp = this.root;\n        let leftChange = true;\n        while(currentNode){\n           if(currentNode.value < value){\n             temp = currentNode;\n             currentNode = currentNode.right;\n             leftChange = false;\n  \n          }else if(currentNode.value > value){\n            temp = currentNode;\n            currentNode = currentNode.left;\n            leftChange = true;\n          }\n          else {\n            if(!currentNode.left && !currentNode.right){\n              if(leftChange){\n                temp.left = null\n              }else {\n                temp.right = null\n              }\n              currentNode = null\n            }else if(!currentNode.right){\n               currentNode = currentNode.left;\n               if(leftChange){\n                temp.left = currentNode\n                }else {\n                  temp.right = currentNode\n                }\n  \n            }else {\n               const formerLeft = currentNode.left\n               currentNode = currentNode.right;\n               currentNode.left = formerLeft;\n               if(leftChange){\n                temp.left = currentNode\n                }else {\n                  temp.right = currentNode\n                }\n              break;\n  \n            }\n          }\n        }\n      }\n    }\n\n    async animateRemove(value){\n      if(!this.root){\n       return null\n     }else{\n       let currentNode = this.root;\n       let temp = this.root;\n       let leftChange = true;\n       while(currentNode){\n          if(currentNode.value < value){\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"red\"});\n            $( `#animate${currentNode.value}` ).effect( \"shake\" );\n            await wait()\n            $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n            temp = currentNode;\n            currentNode = currentNode.right;\n            leftChange = false;\n \n         }else if(currentNode.value > value){\n          $( `#animate${currentNode.value}` ).css({backgroundColor: \"red\"});\n          $( `#animate${currentNode.value}` ).effect( \"shake\" );\n          await wait()\n          $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n           temp = currentNode;\n           currentNode = currentNode.left;\n           leftChange = true;\n         }\n         else {\n          $( `#animate${currentNode.value}` ).css({backgroundColor: \"#90ee90\"});\n          $( `#animate${currentNode.value}` ).effect( \"shake\" );\n          await wait()\n          $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n           if(!currentNode.left && !currentNode.right){\n             if(leftChange){\n               temp.left = null\n             }else {\n               temp.right = null\n             }\n             currentNode = null\n           }else if(!currentNode.right){\n              currentNode = currentNode.left;\n              if(leftChange){\n               temp.left = currentNode\n               }else {\n                 temp.right = currentNode\n               }\n \n           }else {\n              const formerLeft = currentNode.left\n              currentNode = currentNode.right;\n              currentNode.left = formerLeft;\n              if(leftChange){\n               temp.left = currentNode\n               }else {\n                 temp.right = currentNode\n               }\n             break;\n \n           }\n         }\n       }\n     }\n   }\n\n   animateBreathFirstSearch = async () => {\n    let currentNode = this.root;\n    let queue = [];\n    let list = [];\n    queue.push(currentNode)\n    while(queue.length){\n      $( `#animate${currentNode.value}` ).css({backgroundColor: \"#90ee90\"});\n      $( `#animate${currentNode.value}` ).effect( \"shake\" );\n      await wait()\n      $( `#animate${currentNode.value}` ).css({backgroundColor: \"#ffcd00\"});\n      currentNode = queue.shift();\n      list.push(currentNode.value);\n      if(currentNode.left){\n        queue.push(currentNode.left)\n      }\n      if(currentNode.right){\n        queue.push(currentNode.right)\n      }\n    }\n    return list\n  }\n \n  \n    breathFirstSearch = () => {\n      let currentNode = this.root;\n      let queue = [];\n      let list = [];\n      queue.push(currentNode)\n      while(queue.length){\n        currentNode = queue.shift();\n        list.push(currentNode.value);\n        if(currentNode.left){\n          queue.push(currentNode.left)\n        }\n        if(currentNode.right){\n          queue.push(currentNode.right)\n        }\n      }\n      return list\n    }\n  \n     BreadthFirstSearchR(queue, list) {\n      if (!queue.length) {\n        return list;\n      }\n      const currentNode = queue.shift();\n      list.push(currentNode.value);\n      \n      if (currentNode.left) {\n        queue.push(currentNode.left);\n      }\n      if (currentNode.right) {\n        queue.push(currentNode.right);\n      }\n      \n      return this.BreadthFirstSearchR(queue, list);\n    }\n  \n    async DFTPreOrder(list=[]) {\n      return await traversePreOrder(this.root, list);\n    }\n    async DFTPostOrder(list=[]){\n      return await traversePostOrder(this.root, list); \n    }\n    async DFTInOrder(list=[]){\n      return await traverseInOrder(this.root, list);\n    } \n\n\n  build(node) {\n    if(!node) {\n      return;\n    }\n    return {\n      node: node.value,\n      left: this.build(node.left),\n      right: this.build(node.right)\n    }\n  }\n\n    serialize() {\n        // Depth first\n        return this.build(this.root);\n    } \n  }\n  \n  async function traversePreOrder(node, list){\n    $( `#animate${node.value}` ).css({backgroundColor: \"#90ee90\"});\n    $( `#animate${node.value}` ).effect( \"shake\" );\n    await wait()\n    $( `#animate${node.value}` ).css({backgroundColor: \"#ffcd00\"});\n    list.push(node.value);\n    if(node.left) {\n      await traversePreOrder(node.left, list);\n    }\n    if(node.right) {\n      await traversePreOrder(node.right, list);\n    }\n    return list;\n  }\n  \n  async function traverseInOrder(node, list){\n    if(node.left) {\n      await traverseInOrder(node.left, list);\n    }\n    $( `#animate${node.value}` ).css({backgroundColor: \"#90ee90\"});\n    $( `#animate${node.value}` ).effect( \"shake\" );\n    await wait()\n    $( `#animate${node.value}` ).css({backgroundColor: \"#ffcd00\"});\n    list.push(node.value);\n    if(node.right) {\n      await traverseInOrder(node.right, list);\n    }\n    return list;\n  }\n  \n  async function traversePostOrder(node, list){\n    if(node.left) {\n      await traversePostOrder(node.left, list);\n    }\n    if(node.right) {\n      await traversePostOrder(node.right, list);\n    }\n    $( `#animate${node.value}` ).css({backgroundColor: \"#90ee90\"});\n    $( `#animate${node.value}` ).effect( \"shake\" );\n    await wait()\n    $( `#animate${node.value}` ).css({backgroundColor: \"#ffcd00\"});\n    list.push(node.value);\n    return list;\n  }","import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Input,\n  Stack,\n  Button,\n  FormControl,\n  FormLabel,\n  Flex,\n} from \"@chakra-ui/react\";\nimport BinarySearchTree from \"../algorithms/binaryTree\";\nimport Face from \"../components/smiley\";\n\nconst BinaryTree = () => {\n  const [bTree, setBTree] = useState();\n  const [value, setValue] = useState();\n \n  useEffect(() => {\n    document.querySelector(\"body\").addEventListener(\"mousemove\", eyeball);\n    const tree = new BinarySearchTree();\n    tree.insert(9);\n    tree.insert(4);\n    tree.insert(6);\n    tree.insert(20);\n    tree.insert(170);\n    tree.insert(15);\n    tree.insert(1);\n    setBTree(tree);\n  }, []);\n\n  const handleAddItem = async () => {\n    if (!value) {\n      return;\n    }\n    await bTree.animateInsert(value);\n\n    setBTree(bTree)\n    setValue();\n  };\n\n  const handleRemoveItem = async () => {\n    if(!value){\n      return;\n    }\n    await bTree.animateRemove(value);\n    setValue();\n  };\n\n  const handleGetItemAtIndex = async () => {\n    if (!value) {\n      return;\n    }\n    await bTree.animateLookup(value)\n    setValue();\n  };\n\n  const handleBFS = async () => {\n    await bTree.animateBreathFirstSearch();\n  }\n\n  const handleDFSPreOrder = async () => {\n    await bTree.DFTPreOrder();\n  }\n  \n  const handleDFSInOrder = async () => {\n    await bTree.DFTInOrder()\n  }\n\n  const handleDFSPostOrder = async () => {\n    await bTree.DFTPostOrder();\n  }\n\n  function eyeball(event) {\n    var eye = document.querySelectorAll(\".eye\");\n    eye.forEach(function (eye) {\n      // x & y are variables and x represents the x coordinate of the mouse and y represents the coordinate of the mouse.\n      let x = eye.getBoundingClientRect().left + eye.clientWidth / 2;\n      let y = eye.getBoundingClientRect().top + eye.clientHeight / 2;\n      let radian = Math.atan2(event.pageX - x, event.pageY - y);\n      //   rot is a variable (short for rotate)\n      let rot = radian * (180 / Math.PI) * -1 + 270;\n      eye.style.transform = \"rotate(\" + rot + \"deg)\";\n    });\n  }\n\n  const render = (obj) => {\n      if(!obj){\n          return;\n      }\n    return (\n      <li>\n        <span className=\"tf-nc\">\n          <Face id={obj.node} item={obj.node} />\n        </span>\n        <ul>\n          {obj.left && render(obj.left)}\n          {obj.right && render(obj.right)}\n        </ul>\n      </li>\n    );\n  };\n\n  return (\n    <Container minWidth=\"95vw\">\n      <Flex>\n        <Stack spacing={3} marginTop=\"100px\">\n          <FormControl id=\"Value\" isRequired>\n            <FormLabel>Value</FormLabel>\n            <Input\n              placeholder=\"Value of Item to Add\"\n              size=\"lg\"\n              maxWidth=\"300px\"\n              onChange={(e) => setValue(e.target.value)}\n            />\n          </FormControl>\n          <Button\n            colorScheme=\"blue\"\n            size=\"lg\"\n            maxWidth=\"300px\"\n            onClick={handleAddItem}\n          >\n            Add Item\n          </Button>\n          <Button\n            colorScheme=\"teal\"\n            size=\"lg\"\n            maxWidth=\"300px\"\n            onClick={handleGetItemAtIndex}\n          >\n            Get Item\n          </Button>\n\n          <Button\n            colorScheme=\"yellow\"\n            size=\"lg\"\n            maxWidth=\"300px\"\n            onClick={handleDFSInOrder}\n          >\n            Depth First Search In-order\n          </Button>\n\n          <Button\n            colorScheme=\"orange\"\n            size=\"lg\"\n            maxWidth=\"300px\"\n            onClick={handleDFSPreOrder}\n          >\n            Depth First Search Pre-order\n          </Button>    \n        \n\n          <Button\n            colorScheme=\"pink\"\n            size=\"lg\"\n            maxWidth=\"300px\"\n            onClick={handleDFSPostOrder}\n          >\n            Depth First Search Post-order\n          </Button>\n\n\n          <Button\n            colorScheme=\"purple\"\n            size=\"lg\"\n            maxWidth=\"300px\"\n            onClick={handleBFS}\n          >\n            Breath First Search\n          </Button>\n\n          <Button\n            colorScheme=\"red\"\n            size=\"lg\"\n            maxWidth=\"300px\"\n            onClick={handleRemoveItem}\n          >\n            Remove Item\n          </Button>\n\n        </Stack>\n        <Flex flexDirection=\"row\" justifyContent=\"center\" marginTop=\"100px\">\n          <div className=\"tf-tree\">\n            <ul>{bTree && bTree.serialize && render(bTree.serialize())}</ul>\n          </div>\n        </Flex>\n      </Flex>\n    </Container>\n  );\n};\n\nexport default BinaryTree;\n","import { useState } from 'react';\nimport { Container, Stack, Button, ChakraProvider } from \"@chakra-ui/react\"\nimport $ from 'jquery';\nimport 'jquery-ui-bundle';\nimport 'jquery-ui-bundle/jquery-ui.min.css';\nimport 'treeflex/dist/css/treeflex.css';\n\nimport LinkedList from './pages/LinkedList';\nimport './App.css';\nimport BinaryTree from './pages/BinaryTree';\n\n\nfunction App() {\nconst [mode, setMode] = useState(); \nconst handleChangeMode = (mode) => {\n  $( \"#explode\" ).toggle( \"explode\" );\n  setTimeout(()=> setMode(mode),1000)\n  \n}\n  \nconst Stucktures = () => {\n  return (\n    <Stack spacing={4} direction=\"row\" id=\"explode\">\n      <Button colorScheme=\"teal\" size=\"lg\" onClick={() => handleChangeMode('linkedList')}>\n        Linked List\n      </Button>\n      <Button colorScheme=\"teal\" size=\"lg\" onClick={() => handleChangeMode('tree')}>\n        Binary Tree\n      </Button>\n      <Button colorScheme=\"teal\" size=\"lg\">\n        Queue\n      </Button>\n      <Button colorScheme=\"teal\" size=\"lg\">\n        Stack\n      </Button>\n  </Stack>\n  )\n}\n  return (\n   \n    <ChakraProvider>\n    \n       <Container minWidth=\"100vw\" display={'flex'} flexDirection={'column'}  alignItems={'center'} {...(!mode && { height: \"100vh\", justifyContent: 'center' })}>\n       \n       <Stucktures/>\n       \n       {mode === 'linkedList'?\n       <LinkedList/>: mode === 'tree'? <BinaryTree />: ''}\n       </Container>   \n      \n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}